[tox]
envlist = py39, static, docs

[testenv]
deps=
	-r requirements.txt
	-r test-requirements.txt
commands=pytest {posargs}
whitelist_externals=sh

[testenv:static]
commands=
	mypy --install-types --non-interactive -p exodus_gw -p tests
	sh -c 'pylint exodus_gw; test $(( $? & (1|2|4|32) )) = 0'
	black --check .
	isort --check .

[testenv:cov]
usedevelop=true
commands=
	pytest --cov-report=html --cov=exodus_gw {posargs}

[testenv:cov-ci]
passenv=GITHUB_*
usedevelop=true
commands=
	pytest --cov=exodus_gw {posargs}
	coveralls --service=github

[testenv:bandit]
usedevelop=true
commands=
	bandit -r -ll -c bandit.yaml .

[testenv:safety]
usedevelop=true
commands=
	safety check --full-report

[testenv:docs]
use_develop=true
commands=
	python scripts/gen-openapi
	sphinx-build -M html docs docs/_build

[testenv:alembic-autogen]
use_develop=true
passenv=EXODUS_GW*
commands=
    python scripts/alembic-autogen {posargs}

[testenv:dev-worker]
use_develop=true
passenv=EXODUS_GW*
commands=
    dramatiq --watch exodus_gw exodus_gw.worker -p 1 {posargs}

[testenv:dev-server]
use_develop=true
passenv=EXODUS_GW*
commands=
    uvicorn --reload --reload-dir exodus_gw exodus_gw.main:app {posargs}

[pytest]
testpaths = tests
addopts =
    -v
    # Turn 'coroutine ... was never awaited' warnings into errors...
    -Werror:coroutine:RuntimeWarning
    # ..and we also have to turn these into errors, because those coroutine
    # warnings happen outside of test functions and pytest will otherwise
    # not allow them to be raised
    -Werror::pytest.PytestUnraisableExceptionWarning
asyncio_mode = auto

[coverage:run]
relative_files = true
